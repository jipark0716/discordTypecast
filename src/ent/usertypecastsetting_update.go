// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jipark0716/discordTypecast/ent/predicate"
	"github.com/jipark0716/discordTypecast/ent/usertypecastsetting"
)

// UserTypecastSettingUpdate is the builder for updating UserTypecastSetting entities.
type UserTypecastSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserTypecastSettingMutation
}

// Where appends a list predicates to the UserTypecastSettingUpdate builder.
func (utsu *UserTypecastSettingUpdate) Where(ps ...predicate.UserTypecastSetting) *UserTypecastSettingUpdate {
	utsu.mutation.Where(ps...)
	return utsu
}

// SetUserID sets the "user_id" field.
func (utsu *UserTypecastSettingUpdate) SetUserID(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetUserID(s)
	return utsu
}

// SetActorID sets the "actor_id" field.
func (utsu *UserTypecastSettingUpdate) SetActorID(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetActorID(s)
	return utsu
}

// SetLang sets the "lang" field.
func (utsu *UserTypecastSettingUpdate) SetLang(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetLang(s)
	return utsu
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableLang(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetLang(*s)
	}
	return utsu
}

// SetMaxSeconds sets the "max_seconds" field.
func (utsu *UserTypecastSettingUpdate) SetMaxSeconds(i int) *UserTypecastSettingUpdate {
	utsu.mutation.ResetMaxSeconds()
	utsu.mutation.SetMaxSeconds(i)
	return utsu
}

// SetNillableMaxSeconds sets the "max_seconds" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableMaxSeconds(i *int) *UserTypecastSettingUpdate {
	if i != nil {
		utsu.SetMaxSeconds(*i)
	}
	return utsu
}

// AddMaxSeconds adds i to the "max_seconds" field.
func (utsu *UserTypecastSettingUpdate) AddMaxSeconds(i int) *UserTypecastSettingUpdate {
	utsu.mutation.AddMaxSeconds(i)
	return utsu
}

// SetNaturalness sets the "naturalness" field.
func (utsu *UserTypecastSettingUpdate) SetNaturalness(f float64) *UserTypecastSettingUpdate {
	utsu.mutation.ResetNaturalness()
	utsu.mutation.SetNaturalness(f)
	return utsu
}

// SetNillableNaturalness sets the "naturalness" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableNaturalness(f *float64) *UserTypecastSettingUpdate {
	if f != nil {
		utsu.SetNaturalness(*f)
	}
	return utsu
}

// AddNaturalness adds f to the "naturalness" field.
func (utsu *UserTypecastSettingUpdate) AddNaturalness(f float64) *UserTypecastSettingUpdate {
	utsu.mutation.AddNaturalness(f)
	return utsu
}

// SetSpeedX sets the "speed_x" field.
func (utsu *UserTypecastSettingUpdate) SetSpeedX(i int) *UserTypecastSettingUpdate {
	utsu.mutation.ResetSpeedX()
	utsu.mutation.SetSpeedX(i)
	return utsu
}

// SetNillableSpeedX sets the "speed_x" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableSpeedX(i *int) *UserTypecastSettingUpdate {
	if i != nil {
		utsu.SetSpeedX(*i)
	}
	return utsu
}

// AddSpeedX adds i to the "speed_x" field.
func (utsu *UserTypecastSettingUpdate) AddSpeedX(i int) *UserTypecastSettingUpdate {
	utsu.mutation.AddSpeedX(i)
	return utsu
}

// SetGid sets the "gid" field.
func (utsu *UserTypecastSettingUpdate) SetGid(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetGid(s)
	return utsu
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableGid(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetGid(*s)
	}
	return utsu
}

// SetStyleIdx sets the "style_idx" field.
func (utsu *UserTypecastSettingUpdate) SetStyleIdx(i int) *UserTypecastSettingUpdate {
	utsu.mutation.ResetStyleIdx()
	utsu.mutation.SetStyleIdx(i)
	return utsu
}

// SetNillableStyleIdx sets the "style_idx" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableStyleIdx(i *int) *UserTypecastSettingUpdate {
	if i != nil {
		utsu.SetStyleIdx(*i)
	}
	return utsu
}

// AddStyleIdx adds i to the "style_idx" field.
func (utsu *UserTypecastSettingUpdate) AddStyleIdx(i int) *UserTypecastSettingUpdate {
	utsu.mutation.AddStyleIdx(i)
	return utsu
}

// SetLastPitch sets the "last_pitch" field.
func (utsu *UserTypecastSettingUpdate) SetLastPitch(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetLastPitch(s)
	return utsu
}

// SetNillableLastPitch sets the "last_pitch" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableLastPitch(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetLastPitch(*s)
	}
	return utsu
}

// ClearLastPitch clears the value of the "last_pitch" field.
func (utsu *UserTypecastSettingUpdate) ClearLastPitch() *UserTypecastSettingUpdate {
	utsu.mutation.ClearLastPitch()
	return utsu
}

// SetMode sets the "mode" field.
func (utsu *UserTypecastSettingUpdate) SetMode(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetMode(s)
	return utsu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableMode(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetMode(*s)
	}
	return utsu
}

// ClearMode clears the value of the "mode" field.
func (utsu *UserTypecastSettingUpdate) ClearMode() *UserTypecastSettingUpdate {
	utsu.mutation.ClearMode()
	return utsu
}

// SetPitch sets the "pitch" field.
func (utsu *UserTypecastSettingUpdate) SetPitch(i int) *UserTypecastSettingUpdate {
	utsu.mutation.ResetPitch()
	utsu.mutation.SetPitch(i)
	return utsu
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillablePitch(i *int) *UserTypecastSettingUpdate {
	if i != nil {
		utsu.SetPitch(*i)
	}
	return utsu
}

// AddPitch adds i to the "pitch" field.
func (utsu *UserTypecastSettingUpdate) AddPitch(i int) *UserTypecastSettingUpdate {
	utsu.mutation.AddPitch(i)
	return utsu
}

// SetStyleLabel sets the "style_label" field.
func (utsu *UserTypecastSettingUpdate) SetStyleLabel(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetStyleLabel(s)
	return utsu
}

// SetNillableStyleLabel sets the "style_label" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableStyleLabel(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetStyleLabel(*s)
	}
	return utsu
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (utsu *UserTypecastSettingUpdate) SetStyleLabelVersion(s string) *UserTypecastSettingUpdate {
	utsu.mutation.SetStyleLabelVersion(s)
	return utsu
}

// SetNillableStyleLabelVersion sets the "style_label_version" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableStyleLabelVersion(s *string) *UserTypecastSettingUpdate {
	if s != nil {
		utsu.SetStyleLabelVersion(*s)
	}
	return utsu
}

// SetTempo sets the "tempo" field.
func (utsu *UserTypecastSettingUpdate) SetTempo(i int) *UserTypecastSettingUpdate {
	utsu.mutation.ResetTempo()
	utsu.mutation.SetTempo(i)
	return utsu
}

// SetNillableTempo sets the "tempo" field if the given value is not nil.
func (utsu *UserTypecastSettingUpdate) SetNillableTempo(i *int) *UserTypecastSettingUpdate {
	if i != nil {
		utsu.SetTempo(*i)
	}
	return utsu
}

// AddTempo adds i to the "tempo" field.
func (utsu *UserTypecastSettingUpdate) AddTempo(i int) *UserTypecastSettingUpdate {
	utsu.mutation.AddTempo(i)
	return utsu
}

// Mutation returns the UserTypecastSettingMutation object of the builder.
func (utsu *UserTypecastSettingUpdate) Mutation() *UserTypecastSettingMutation {
	return utsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utsu *UserTypecastSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(utsu.hooks) == 0 {
		affected, err = utsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTypecastSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utsu.mutation = mutation
			affected, err = utsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(utsu.hooks) - 1; i >= 0; i-- {
			if utsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = utsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, utsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (utsu *UserTypecastSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := utsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utsu *UserTypecastSettingUpdate) Exec(ctx context.Context) error {
	_, err := utsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsu *UserTypecastSettingUpdate) ExecX(ctx context.Context) {
	if err := utsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utsu *UserTypecastSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usertypecastsetting.Table,
			Columns: usertypecastsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertypecastsetting.FieldID,
			},
		},
	}
	if ps := utsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldUserID,
		})
	}
	if value, ok := utsu.mutation.ActorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldActorID,
		})
	}
	if value, ok := utsu.mutation.Lang(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLang,
		})
	}
	if value, ok := utsu.mutation.MaxSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldMaxSeconds,
		})
	}
	if value, ok := utsu.mutation.AddedMaxSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldMaxSeconds,
		})
	}
	if value, ok := utsu.mutation.Naturalness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usertypecastsetting.FieldNaturalness,
		})
	}
	if value, ok := utsu.mutation.AddedNaturalness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usertypecastsetting.FieldNaturalness,
		})
	}
	if value, ok := utsu.mutation.SpeedX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldSpeedX,
		})
	}
	if value, ok := utsu.mutation.AddedSpeedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldSpeedX,
		})
	}
	if value, ok := utsu.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldGid,
		})
	}
	if value, ok := utsu.mutation.StyleIdx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldStyleIdx,
		})
	}
	if value, ok := utsu.mutation.AddedStyleIdx(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldStyleIdx,
		})
	}
	if value, ok := utsu.mutation.LastPitch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLastPitch,
		})
	}
	if utsu.mutation.LastPitchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usertypecastsetting.FieldLastPitch,
		})
	}
	if value, ok := utsu.mutation.Mode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldMode,
		})
	}
	if utsu.mutation.ModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usertypecastsetting.FieldMode,
		})
	}
	if value, ok := utsu.mutation.Pitch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldPitch,
		})
	}
	if value, ok := utsu.mutation.AddedPitch(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldPitch,
		})
	}
	if value, ok := utsu.mutation.StyleLabel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabel,
		})
	}
	if value, ok := utsu.mutation.StyleLabelVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabelVersion,
		})
	}
	if value, ok := utsu.mutation.Tempo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldTempo,
		})
	}
	if value, ok := utsu.mutation.AddedTempo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldTempo,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertypecastsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserTypecastSettingUpdateOne is the builder for updating a single UserTypecastSetting entity.
type UserTypecastSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTypecastSettingMutation
}

// SetUserID sets the "user_id" field.
func (utsuo *UserTypecastSettingUpdateOne) SetUserID(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetUserID(s)
	return utsuo
}

// SetActorID sets the "actor_id" field.
func (utsuo *UserTypecastSettingUpdateOne) SetActorID(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetActorID(s)
	return utsuo
}

// SetLang sets the "lang" field.
func (utsuo *UserTypecastSettingUpdateOne) SetLang(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetLang(s)
	return utsuo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableLang(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetLang(*s)
	}
	return utsuo
}

// SetMaxSeconds sets the "max_seconds" field.
func (utsuo *UserTypecastSettingUpdateOne) SetMaxSeconds(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetMaxSeconds()
	utsuo.mutation.SetMaxSeconds(i)
	return utsuo
}

// SetNillableMaxSeconds sets the "max_seconds" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableMaxSeconds(i *int) *UserTypecastSettingUpdateOne {
	if i != nil {
		utsuo.SetMaxSeconds(*i)
	}
	return utsuo
}

// AddMaxSeconds adds i to the "max_seconds" field.
func (utsuo *UserTypecastSettingUpdateOne) AddMaxSeconds(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddMaxSeconds(i)
	return utsuo
}

// SetNaturalness sets the "naturalness" field.
func (utsuo *UserTypecastSettingUpdateOne) SetNaturalness(f float64) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetNaturalness()
	utsuo.mutation.SetNaturalness(f)
	return utsuo
}

// SetNillableNaturalness sets the "naturalness" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableNaturalness(f *float64) *UserTypecastSettingUpdateOne {
	if f != nil {
		utsuo.SetNaturalness(*f)
	}
	return utsuo
}

// AddNaturalness adds f to the "naturalness" field.
func (utsuo *UserTypecastSettingUpdateOne) AddNaturalness(f float64) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddNaturalness(f)
	return utsuo
}

// SetSpeedX sets the "speed_x" field.
func (utsuo *UserTypecastSettingUpdateOne) SetSpeedX(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetSpeedX()
	utsuo.mutation.SetSpeedX(i)
	return utsuo
}

// SetNillableSpeedX sets the "speed_x" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableSpeedX(i *int) *UserTypecastSettingUpdateOne {
	if i != nil {
		utsuo.SetSpeedX(*i)
	}
	return utsuo
}

// AddSpeedX adds i to the "speed_x" field.
func (utsuo *UserTypecastSettingUpdateOne) AddSpeedX(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddSpeedX(i)
	return utsuo
}

// SetGid sets the "gid" field.
func (utsuo *UserTypecastSettingUpdateOne) SetGid(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetGid(s)
	return utsuo
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableGid(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetGid(*s)
	}
	return utsuo
}

// SetStyleIdx sets the "style_idx" field.
func (utsuo *UserTypecastSettingUpdateOne) SetStyleIdx(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetStyleIdx()
	utsuo.mutation.SetStyleIdx(i)
	return utsuo
}

// SetNillableStyleIdx sets the "style_idx" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableStyleIdx(i *int) *UserTypecastSettingUpdateOne {
	if i != nil {
		utsuo.SetStyleIdx(*i)
	}
	return utsuo
}

// AddStyleIdx adds i to the "style_idx" field.
func (utsuo *UserTypecastSettingUpdateOne) AddStyleIdx(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddStyleIdx(i)
	return utsuo
}

// SetLastPitch sets the "last_pitch" field.
func (utsuo *UserTypecastSettingUpdateOne) SetLastPitch(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetLastPitch(s)
	return utsuo
}

// SetNillableLastPitch sets the "last_pitch" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableLastPitch(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetLastPitch(*s)
	}
	return utsuo
}

// ClearLastPitch clears the value of the "last_pitch" field.
func (utsuo *UserTypecastSettingUpdateOne) ClearLastPitch() *UserTypecastSettingUpdateOne {
	utsuo.mutation.ClearLastPitch()
	return utsuo
}

// SetMode sets the "mode" field.
func (utsuo *UserTypecastSettingUpdateOne) SetMode(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetMode(s)
	return utsuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableMode(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetMode(*s)
	}
	return utsuo
}

// ClearMode clears the value of the "mode" field.
func (utsuo *UserTypecastSettingUpdateOne) ClearMode() *UserTypecastSettingUpdateOne {
	utsuo.mutation.ClearMode()
	return utsuo
}

// SetPitch sets the "pitch" field.
func (utsuo *UserTypecastSettingUpdateOne) SetPitch(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetPitch()
	utsuo.mutation.SetPitch(i)
	return utsuo
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillablePitch(i *int) *UserTypecastSettingUpdateOne {
	if i != nil {
		utsuo.SetPitch(*i)
	}
	return utsuo
}

// AddPitch adds i to the "pitch" field.
func (utsuo *UserTypecastSettingUpdateOne) AddPitch(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddPitch(i)
	return utsuo
}

// SetStyleLabel sets the "style_label" field.
func (utsuo *UserTypecastSettingUpdateOne) SetStyleLabel(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetStyleLabel(s)
	return utsuo
}

// SetNillableStyleLabel sets the "style_label" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableStyleLabel(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetStyleLabel(*s)
	}
	return utsuo
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (utsuo *UserTypecastSettingUpdateOne) SetStyleLabelVersion(s string) *UserTypecastSettingUpdateOne {
	utsuo.mutation.SetStyleLabelVersion(s)
	return utsuo
}

// SetNillableStyleLabelVersion sets the "style_label_version" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableStyleLabelVersion(s *string) *UserTypecastSettingUpdateOne {
	if s != nil {
		utsuo.SetStyleLabelVersion(*s)
	}
	return utsuo
}

// SetTempo sets the "tempo" field.
func (utsuo *UserTypecastSettingUpdateOne) SetTempo(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.ResetTempo()
	utsuo.mutation.SetTempo(i)
	return utsuo
}

// SetNillableTempo sets the "tempo" field if the given value is not nil.
func (utsuo *UserTypecastSettingUpdateOne) SetNillableTempo(i *int) *UserTypecastSettingUpdateOne {
	if i != nil {
		utsuo.SetTempo(*i)
	}
	return utsuo
}

// AddTempo adds i to the "tempo" field.
func (utsuo *UserTypecastSettingUpdateOne) AddTempo(i int) *UserTypecastSettingUpdateOne {
	utsuo.mutation.AddTempo(i)
	return utsuo
}

// Mutation returns the UserTypecastSettingMutation object of the builder.
func (utsuo *UserTypecastSettingUpdateOne) Mutation() *UserTypecastSettingMutation {
	return utsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utsuo *UserTypecastSettingUpdateOne) Select(field string, fields ...string) *UserTypecastSettingUpdateOne {
	utsuo.fields = append([]string{field}, fields...)
	return utsuo
}

// Save executes the query and returns the updated UserTypecastSetting entity.
func (utsuo *UserTypecastSettingUpdateOne) Save(ctx context.Context) (*UserTypecastSetting, error) {
	var (
		err  error
		node *UserTypecastSetting
	)
	if len(utsuo.hooks) == 0 {
		node, err = utsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTypecastSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utsuo.mutation = mutation
			node, err = utsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(utsuo.hooks) - 1; i >= 0; i-- {
			if utsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = utsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, utsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserTypecastSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserTypecastSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (utsuo *UserTypecastSettingUpdateOne) SaveX(ctx context.Context) *UserTypecastSetting {
	node, err := utsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utsuo *UserTypecastSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := utsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsuo *UserTypecastSettingUpdateOne) ExecX(ctx context.Context) {
	if err := utsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utsuo *UserTypecastSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserTypecastSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usertypecastsetting.Table,
			Columns: usertypecastsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertypecastsetting.FieldID,
			},
		},
	}
	id, ok := utsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTypecastSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertypecastsetting.FieldID)
		for _, f := range fields {
			if !usertypecastsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertypecastsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldUserID,
		})
	}
	if value, ok := utsuo.mutation.ActorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldActorID,
		})
	}
	if value, ok := utsuo.mutation.Lang(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLang,
		})
	}
	if value, ok := utsuo.mutation.MaxSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldMaxSeconds,
		})
	}
	if value, ok := utsuo.mutation.AddedMaxSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldMaxSeconds,
		})
	}
	if value, ok := utsuo.mutation.Naturalness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usertypecastsetting.FieldNaturalness,
		})
	}
	if value, ok := utsuo.mutation.AddedNaturalness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usertypecastsetting.FieldNaturalness,
		})
	}
	if value, ok := utsuo.mutation.SpeedX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldSpeedX,
		})
	}
	if value, ok := utsuo.mutation.AddedSpeedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldSpeedX,
		})
	}
	if value, ok := utsuo.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldGid,
		})
	}
	if value, ok := utsuo.mutation.StyleIdx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldStyleIdx,
		})
	}
	if value, ok := utsuo.mutation.AddedStyleIdx(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldStyleIdx,
		})
	}
	if value, ok := utsuo.mutation.LastPitch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLastPitch,
		})
	}
	if utsuo.mutation.LastPitchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usertypecastsetting.FieldLastPitch,
		})
	}
	if value, ok := utsuo.mutation.Mode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldMode,
		})
	}
	if utsuo.mutation.ModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: usertypecastsetting.FieldMode,
		})
	}
	if value, ok := utsuo.mutation.Pitch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldPitch,
		})
	}
	if value, ok := utsuo.mutation.AddedPitch(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldPitch,
		})
	}
	if value, ok := utsuo.mutation.StyleLabel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabel,
		})
	}
	if value, ok := utsuo.mutation.StyleLabelVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabelVersion,
		})
	}
	if value, ok := utsuo.mutation.Tempo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldTempo,
		})
	}
	if value, ok := utsuo.mutation.AddedTempo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldTempo,
		})
	}
	_node = &UserTypecastSetting{config: utsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertypecastsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
