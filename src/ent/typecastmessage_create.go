// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jipark0716/discordTypecast/ent/typecastmessage"
)

// TypecastMessageCreate is the builder for creating a TypecastMessage entity.
type TypecastMessageCreate struct {
	config
	mutation *TypecastMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tmc *TypecastMessageCreate) SetUserID(s string) *TypecastMessageCreate {
	tmc.mutation.SetUserID(s)
	return tmc
}

// SetText sets the "text" field.
func (tmc *TypecastMessageCreate) SetText(s string) *TypecastMessageCreate {
	tmc.mutation.SetText(s)
	return tmc
}

// SetGuildID sets the "guild_id" field.
func (tmc *TypecastMessageCreate) SetGuildID(s string) *TypecastMessageCreate {
	tmc.mutation.SetGuildID(s)
	return tmc
}

// SetChannelID sets the "channel_id" field.
func (tmc *TypecastMessageCreate) SetChannelID(s string) *TypecastMessageCreate {
	tmc.mutation.SetChannelID(s)
	return tmc
}

// SetActorID sets the "actor_id" field.
func (tmc *TypecastMessageCreate) SetActorID(s string) *TypecastMessageCreate {
	tmc.mutation.SetActorID(s)
	return tmc
}

// SetLang sets the "lang" field.
func (tmc *TypecastMessageCreate) SetLang(s string) *TypecastMessageCreate {
	tmc.mutation.SetLang(s)
	return tmc
}

// SetMaxSeconds sets the "max_seconds" field.
func (tmc *TypecastMessageCreate) SetMaxSeconds(i int) *TypecastMessageCreate {
	tmc.mutation.SetMaxSeconds(i)
	return tmc
}

// SetNaturalness sets the "naturalness" field.
func (tmc *TypecastMessageCreate) SetNaturalness(f float64) *TypecastMessageCreate {
	tmc.mutation.SetNaturalness(f)
	return tmc
}

// SetSpeedX sets the "speed_x" field.
func (tmc *TypecastMessageCreate) SetSpeedX(i int) *TypecastMessageCreate {
	tmc.mutation.SetSpeedX(i)
	return tmc
}

// SetGid sets the "gid" field.
func (tmc *TypecastMessageCreate) SetGid(s string) *TypecastMessageCreate {
	tmc.mutation.SetGid(s)
	return tmc
}

// SetStyleIdx sets the "style_idx" field.
func (tmc *TypecastMessageCreate) SetStyleIdx(i int) *TypecastMessageCreate {
	tmc.mutation.SetStyleIdx(i)
	return tmc
}

// SetLastPitch sets the "last_pitch" field.
func (tmc *TypecastMessageCreate) SetLastPitch(s string) *TypecastMessageCreate {
	tmc.mutation.SetLastPitch(s)
	return tmc
}

// SetNillableLastPitch sets the "last_pitch" field if the given value is not nil.
func (tmc *TypecastMessageCreate) SetNillableLastPitch(s *string) *TypecastMessageCreate {
	if s != nil {
		tmc.SetLastPitch(*s)
	}
	return tmc
}

// SetMode sets the "mode" field.
func (tmc *TypecastMessageCreate) SetMode(s string) *TypecastMessageCreate {
	tmc.mutation.SetMode(s)
	return tmc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (tmc *TypecastMessageCreate) SetNillableMode(s *string) *TypecastMessageCreate {
	if s != nil {
		tmc.SetMode(*s)
	}
	return tmc
}

// SetPitch sets the "pitch" field.
func (tmc *TypecastMessageCreate) SetPitch(i int) *TypecastMessageCreate {
	tmc.mutation.SetPitch(i)
	return tmc
}

// SetStyleLabel sets the "style_label" field.
func (tmc *TypecastMessageCreate) SetStyleLabel(s string) *TypecastMessageCreate {
	tmc.mutation.SetStyleLabel(s)
	return tmc
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (tmc *TypecastMessageCreate) SetStyleLabelVersion(s string) *TypecastMessageCreate {
	tmc.mutation.SetStyleLabelVersion(s)
	return tmc
}

// SetTempo sets the "tempo" field.
func (tmc *TypecastMessageCreate) SetTempo(i int) *TypecastMessageCreate {
	tmc.mutation.SetTempo(i)
	return tmc
}

// SetStatus sets the "status" field.
func (tmc *TypecastMessageCreate) SetStatus(i int8) *TypecastMessageCreate {
	tmc.mutation.SetStatus(i)
	return tmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tmc *TypecastMessageCreate) SetNillableStatus(i *int8) *TypecastMessageCreate {
	if i != nil {
		tmc.SetStatus(*i)
	}
	return tmc
}

// SetSendAt sets the "send_at" field.
func (tmc *TypecastMessageCreate) SetSendAt(t time.Time) *TypecastMessageCreate {
	tmc.mutation.SetSendAt(t)
	return tmc
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (tmc *TypecastMessageCreate) SetNillableSendAt(t *time.Time) *TypecastMessageCreate {
	if t != nil {
		tmc.SetSendAt(*t)
	}
	return tmc
}

// Mutation returns the TypecastMessageMutation object of the builder.
func (tmc *TypecastMessageCreate) Mutation() *TypecastMessageMutation {
	return tmc.mutation
}

// Save creates the TypecastMessage in the database.
func (tmc *TypecastMessageCreate) Save(ctx context.Context) (*TypecastMessage, error) {
	var (
		err  error
		node *TypecastMessage
	)
	tmc.defaults()
	if len(tmc.hooks) == 0 {
		if err = tmc.check(); err != nil {
			return nil, err
		}
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TypecastMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmc.check(); err != nil {
				return nil, err
			}
			tmc.mutation = mutation
			if node, err = tmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			if tmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TypecastMessage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TypecastMessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TypecastMessageCreate) SaveX(ctx context.Context) *TypecastMessage {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TypecastMessageCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TypecastMessageCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TypecastMessageCreate) defaults() {
	if _, ok := tmc.mutation.Status(); !ok {
		v := typecastmessage.DefaultStatus
		tmc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TypecastMessageCreate) check() error {
	if _, ok := tmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TypecastMessage.user_id"`)}
	}
	if _, ok := tmc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "TypecastMessage.text"`)}
	}
	if _, ok := tmc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild_id", err: errors.New(`ent: missing required field "TypecastMessage.guild_id"`)}
	}
	if _, ok := tmc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "TypecastMessage.channel_id"`)}
	}
	if _, ok := tmc.mutation.ActorID(); !ok {
		return &ValidationError{Name: "actor_id", err: errors.New(`ent: missing required field "TypecastMessage.actor_id"`)}
	}
	if _, ok := tmc.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "TypecastMessage.lang"`)}
	}
	if _, ok := tmc.mutation.MaxSeconds(); !ok {
		return &ValidationError{Name: "max_seconds", err: errors.New(`ent: missing required field "TypecastMessage.max_seconds"`)}
	}
	if _, ok := tmc.mutation.Naturalness(); !ok {
		return &ValidationError{Name: "naturalness", err: errors.New(`ent: missing required field "TypecastMessage.naturalness"`)}
	}
	if _, ok := tmc.mutation.SpeedX(); !ok {
		return &ValidationError{Name: "speed_x", err: errors.New(`ent: missing required field "TypecastMessage.speed_x"`)}
	}
	if _, ok := tmc.mutation.Gid(); !ok {
		return &ValidationError{Name: "gid", err: errors.New(`ent: missing required field "TypecastMessage.gid"`)}
	}
	if _, ok := tmc.mutation.StyleIdx(); !ok {
		return &ValidationError{Name: "style_idx", err: errors.New(`ent: missing required field "TypecastMessage.style_idx"`)}
	}
	if _, ok := tmc.mutation.Pitch(); !ok {
		return &ValidationError{Name: "pitch", err: errors.New(`ent: missing required field "TypecastMessage.pitch"`)}
	}
	if _, ok := tmc.mutation.StyleLabel(); !ok {
		return &ValidationError{Name: "style_label", err: errors.New(`ent: missing required field "TypecastMessage.style_label"`)}
	}
	if _, ok := tmc.mutation.StyleLabelVersion(); !ok {
		return &ValidationError{Name: "style_label_version", err: errors.New(`ent: missing required field "TypecastMessage.style_label_version"`)}
	}
	if _, ok := tmc.mutation.Tempo(); !ok {
		return &ValidationError{Name: "tempo", err: errors.New(`ent: missing required field "TypecastMessage.tempo"`)}
	}
	if _, ok := tmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TypecastMessage.status"`)}
	}
	return nil
}

func (tmc *TypecastMessageCreate) sqlSave(ctx context.Context) (*TypecastMessage, error) {
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tmc *TypecastMessageCreate) createSpec() (*TypecastMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &TypecastMessage{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: typecastmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: typecastmessage.FieldID,
			},
		}
	)
	_spec.OnConflict = tmc.conflict
	if value, ok := tmc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := tmc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldText,
		})
		_node.Text = value
	}
	if value, ok := tmc.mutation.GuildID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldGuildID,
		})
		_node.GuildID = value
	}
	if value, ok := tmc.mutation.ChannelID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldChannelID,
		})
		_node.ChannelID = value
	}
	if value, ok := tmc.mutation.ActorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldActorID,
		})
		_node.ActorID = value
	}
	if value, ok := tmc.mutation.Lang(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldLang,
		})
		_node.Lang = value
	}
	if value, ok := tmc.mutation.MaxSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecastmessage.FieldMaxSeconds,
		})
		_node.MaxSeconds = value
	}
	if value, ok := tmc.mutation.Naturalness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: typecastmessage.FieldNaturalness,
		})
		_node.Naturalness = value
	}
	if value, ok := tmc.mutation.SpeedX(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecastmessage.FieldSpeedX,
		})
		_node.SpeedX = value
	}
	if value, ok := tmc.mutation.Gid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldGid,
		})
		_node.Gid = value
	}
	if value, ok := tmc.mutation.StyleIdx(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecastmessage.FieldStyleIdx,
		})
		_node.StyleIdx = value
	}
	if value, ok := tmc.mutation.LastPitch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldLastPitch,
		})
		_node.LastPitch = &value
	}
	if value, ok := tmc.mutation.Mode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldMode,
		})
		_node.Mode = &value
	}
	if value, ok := tmc.mutation.Pitch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecastmessage.FieldPitch,
		})
		_node.Pitch = value
	}
	if value, ok := tmc.mutation.StyleLabel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldStyleLabel,
		})
		_node.StyleLabel = value
	}
	if value, ok := tmc.mutation.StyleLabelVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typecastmessage.FieldStyleLabelVersion,
		})
		_node.StyleLabelVersion = value
	}
	if value, ok := tmc.mutation.Tempo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecastmessage.FieldTempo,
		})
		_node.Tempo = value
	}
	if value, ok := tmc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: typecastmessage.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tmc.mutation.SendAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: typecastmessage.FieldSendAt,
		})
		_node.SendAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TypecastMessage.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TypecastMessageUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tmc *TypecastMessageCreate) OnConflict(opts ...sql.ConflictOption) *TypecastMessageUpsertOne {
	tmc.conflict = opts
	return &TypecastMessageUpsertOne{
		create: tmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmc *TypecastMessageCreate) OnConflictColumns(columns ...string) *TypecastMessageUpsertOne {
	tmc.conflict = append(tmc.conflict, sql.ConflictColumns(columns...))
	return &TypecastMessageUpsertOne{
		create: tmc,
	}
}

type (
	// TypecastMessageUpsertOne is the builder for "upsert"-ing
	//  one TypecastMessage node.
	TypecastMessageUpsertOne struct {
		create *TypecastMessageCreate
	}

	// TypecastMessageUpsert is the "OnConflict" setter.
	TypecastMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *TypecastMessageUpsert) SetUserID(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateUserID() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldUserID)
	return u
}

// SetText sets the "text" field.
func (u *TypecastMessageUpsert) SetText(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateText() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldText)
	return u
}

// SetGuildID sets the "guild_id" field.
func (u *TypecastMessageUpsert) SetGuildID(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldGuildID, v)
	return u
}

// UpdateGuildID sets the "guild_id" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateGuildID() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldGuildID)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *TypecastMessageUpsert) SetChannelID(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateChannelID() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldChannelID)
	return u
}

// SetActorID sets the "actor_id" field.
func (u *TypecastMessageUpsert) SetActorID(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldActorID, v)
	return u
}

// UpdateActorID sets the "actor_id" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateActorID() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldActorID)
	return u
}

// SetLang sets the "lang" field.
func (u *TypecastMessageUpsert) SetLang(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldLang, v)
	return u
}

// UpdateLang sets the "lang" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateLang() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldLang)
	return u
}

// SetMaxSeconds sets the "max_seconds" field.
func (u *TypecastMessageUpsert) SetMaxSeconds(v int) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldMaxSeconds, v)
	return u
}

// UpdateMaxSeconds sets the "max_seconds" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateMaxSeconds() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldMaxSeconds)
	return u
}

// AddMaxSeconds adds v to the "max_seconds" field.
func (u *TypecastMessageUpsert) AddMaxSeconds(v int) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldMaxSeconds, v)
	return u
}

// SetNaturalness sets the "naturalness" field.
func (u *TypecastMessageUpsert) SetNaturalness(v float64) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldNaturalness, v)
	return u
}

// UpdateNaturalness sets the "naturalness" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateNaturalness() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldNaturalness)
	return u
}

// AddNaturalness adds v to the "naturalness" field.
func (u *TypecastMessageUpsert) AddNaturalness(v float64) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldNaturalness, v)
	return u
}

// SetSpeedX sets the "speed_x" field.
func (u *TypecastMessageUpsert) SetSpeedX(v int) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldSpeedX, v)
	return u
}

// UpdateSpeedX sets the "speed_x" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateSpeedX() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldSpeedX)
	return u
}

// AddSpeedX adds v to the "speed_x" field.
func (u *TypecastMessageUpsert) AddSpeedX(v int) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldSpeedX, v)
	return u
}

// SetGid sets the "gid" field.
func (u *TypecastMessageUpsert) SetGid(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldGid, v)
	return u
}

// UpdateGid sets the "gid" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateGid() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldGid)
	return u
}

// SetStyleIdx sets the "style_idx" field.
func (u *TypecastMessageUpsert) SetStyleIdx(v int) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldStyleIdx, v)
	return u
}

// UpdateStyleIdx sets the "style_idx" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateStyleIdx() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldStyleIdx)
	return u
}

// AddStyleIdx adds v to the "style_idx" field.
func (u *TypecastMessageUpsert) AddStyleIdx(v int) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldStyleIdx, v)
	return u
}

// SetLastPitch sets the "last_pitch" field.
func (u *TypecastMessageUpsert) SetLastPitch(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldLastPitch, v)
	return u
}

// UpdateLastPitch sets the "last_pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateLastPitch() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldLastPitch)
	return u
}

// ClearLastPitch clears the value of the "last_pitch" field.
func (u *TypecastMessageUpsert) ClearLastPitch() *TypecastMessageUpsert {
	u.SetNull(typecastmessage.FieldLastPitch)
	return u
}

// SetMode sets the "mode" field.
func (u *TypecastMessageUpsert) SetMode(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldMode, v)
	return u
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateMode() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldMode)
	return u
}

// ClearMode clears the value of the "mode" field.
func (u *TypecastMessageUpsert) ClearMode() *TypecastMessageUpsert {
	u.SetNull(typecastmessage.FieldMode)
	return u
}

// SetPitch sets the "pitch" field.
func (u *TypecastMessageUpsert) SetPitch(v int) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldPitch, v)
	return u
}

// UpdatePitch sets the "pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdatePitch() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldPitch)
	return u
}

// AddPitch adds v to the "pitch" field.
func (u *TypecastMessageUpsert) AddPitch(v int) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldPitch, v)
	return u
}

// SetStyleLabel sets the "style_label" field.
func (u *TypecastMessageUpsert) SetStyleLabel(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldStyleLabel, v)
	return u
}

// UpdateStyleLabel sets the "style_label" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateStyleLabel() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldStyleLabel)
	return u
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (u *TypecastMessageUpsert) SetStyleLabelVersion(v string) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldStyleLabelVersion, v)
	return u
}

// UpdateStyleLabelVersion sets the "style_label_version" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateStyleLabelVersion() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldStyleLabelVersion)
	return u
}

// SetTempo sets the "tempo" field.
func (u *TypecastMessageUpsert) SetTempo(v int) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldTempo, v)
	return u
}

// UpdateTempo sets the "tempo" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateTempo() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldTempo)
	return u
}

// AddTempo adds v to the "tempo" field.
func (u *TypecastMessageUpsert) AddTempo(v int) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldTempo, v)
	return u
}

// SetStatus sets the "status" field.
func (u *TypecastMessageUpsert) SetStatus(v int8) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateStatus() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TypecastMessageUpsert) AddStatus(v int8) *TypecastMessageUpsert {
	u.Add(typecastmessage.FieldStatus, v)
	return u
}

// SetSendAt sets the "send_at" field.
func (u *TypecastMessageUpsert) SetSendAt(v time.Time) *TypecastMessageUpsert {
	u.Set(typecastmessage.FieldSendAt, v)
	return u
}

// UpdateSendAt sets the "send_at" field to the value that was provided on create.
func (u *TypecastMessageUpsert) UpdateSendAt() *TypecastMessageUpsert {
	u.SetExcluded(typecastmessage.FieldSendAt)
	return u
}

// ClearSendAt clears the value of the "send_at" field.
func (u *TypecastMessageUpsert) ClearSendAt() *TypecastMessageUpsert {
	u.SetNull(typecastmessage.FieldSendAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TypecastMessageUpsertOne) UpdateNewValues() *TypecastMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TypecastMessageUpsertOne) Ignore() *TypecastMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TypecastMessageUpsertOne) DoNothing() *TypecastMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TypecastMessageCreate.OnConflict
// documentation for more info.
func (u *TypecastMessageUpsertOne) Update(set func(*TypecastMessageUpsert)) *TypecastMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TypecastMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TypecastMessageUpsertOne) SetUserID(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateUserID() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateUserID()
	})
}

// SetText sets the "text" field.
func (u *TypecastMessageUpsertOne) SetText(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateText() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateText()
	})
}

// SetGuildID sets the "guild_id" field.
func (u *TypecastMessageUpsertOne) SetGuildID(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetGuildID(v)
	})
}

// UpdateGuildID sets the "guild_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateGuildID() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateGuildID()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *TypecastMessageUpsertOne) SetChannelID(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateChannelID() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateChannelID()
	})
}

// SetActorID sets the "actor_id" field.
func (u *TypecastMessageUpsertOne) SetActorID(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetActorID(v)
	})
}

// UpdateActorID sets the "actor_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateActorID() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateActorID()
	})
}

// SetLang sets the "lang" field.
func (u *TypecastMessageUpsertOne) SetLang(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetLang(v)
	})
}

// UpdateLang sets the "lang" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateLang() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateLang()
	})
}

// SetMaxSeconds sets the "max_seconds" field.
func (u *TypecastMessageUpsertOne) SetMaxSeconds(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetMaxSeconds(v)
	})
}

// AddMaxSeconds adds v to the "max_seconds" field.
func (u *TypecastMessageUpsertOne) AddMaxSeconds(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddMaxSeconds(v)
	})
}

// UpdateMaxSeconds sets the "max_seconds" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateMaxSeconds() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateMaxSeconds()
	})
}

// SetNaturalness sets the "naturalness" field.
func (u *TypecastMessageUpsertOne) SetNaturalness(v float64) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetNaturalness(v)
	})
}

// AddNaturalness adds v to the "naturalness" field.
func (u *TypecastMessageUpsertOne) AddNaturalness(v float64) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddNaturalness(v)
	})
}

// UpdateNaturalness sets the "naturalness" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateNaturalness() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateNaturalness()
	})
}

// SetSpeedX sets the "speed_x" field.
func (u *TypecastMessageUpsertOne) SetSpeedX(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetSpeedX(v)
	})
}

// AddSpeedX adds v to the "speed_x" field.
func (u *TypecastMessageUpsertOne) AddSpeedX(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddSpeedX(v)
	})
}

// UpdateSpeedX sets the "speed_x" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateSpeedX() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateSpeedX()
	})
}

// SetGid sets the "gid" field.
func (u *TypecastMessageUpsertOne) SetGid(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetGid(v)
	})
}

// UpdateGid sets the "gid" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateGid() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateGid()
	})
}

// SetStyleIdx sets the "style_idx" field.
func (u *TypecastMessageUpsertOne) SetStyleIdx(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleIdx(v)
	})
}

// AddStyleIdx adds v to the "style_idx" field.
func (u *TypecastMessageUpsertOne) AddStyleIdx(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddStyleIdx(v)
	})
}

// UpdateStyleIdx sets the "style_idx" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateStyleIdx() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleIdx()
	})
}

// SetLastPitch sets the "last_pitch" field.
func (u *TypecastMessageUpsertOne) SetLastPitch(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetLastPitch(v)
	})
}

// UpdateLastPitch sets the "last_pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateLastPitch() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateLastPitch()
	})
}

// ClearLastPitch clears the value of the "last_pitch" field.
func (u *TypecastMessageUpsertOne) ClearLastPitch() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearLastPitch()
	})
}

// SetMode sets the "mode" field.
func (u *TypecastMessageUpsertOne) SetMode(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateMode() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateMode()
	})
}

// ClearMode clears the value of the "mode" field.
func (u *TypecastMessageUpsertOne) ClearMode() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearMode()
	})
}

// SetPitch sets the "pitch" field.
func (u *TypecastMessageUpsertOne) SetPitch(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetPitch(v)
	})
}

// AddPitch adds v to the "pitch" field.
func (u *TypecastMessageUpsertOne) AddPitch(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddPitch(v)
	})
}

// UpdatePitch sets the "pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdatePitch() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdatePitch()
	})
}

// SetStyleLabel sets the "style_label" field.
func (u *TypecastMessageUpsertOne) SetStyleLabel(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleLabel(v)
	})
}

// UpdateStyleLabel sets the "style_label" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateStyleLabel() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleLabel()
	})
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (u *TypecastMessageUpsertOne) SetStyleLabelVersion(v string) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleLabelVersion(v)
	})
}

// UpdateStyleLabelVersion sets the "style_label_version" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateStyleLabelVersion() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleLabelVersion()
	})
}

// SetTempo sets the "tempo" field.
func (u *TypecastMessageUpsertOne) SetTempo(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetTempo(v)
	})
}

// AddTempo adds v to the "tempo" field.
func (u *TypecastMessageUpsertOne) AddTempo(v int) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddTempo(v)
	})
}

// UpdateTempo sets the "tempo" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateTempo() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateTempo()
	})
}

// SetStatus sets the "status" field.
func (u *TypecastMessageUpsertOne) SetStatus(v int8) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TypecastMessageUpsertOne) AddStatus(v int8) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateStatus() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStatus()
	})
}

// SetSendAt sets the "send_at" field.
func (u *TypecastMessageUpsertOne) SetSendAt(v time.Time) *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetSendAt(v)
	})
}

// UpdateSendAt sets the "send_at" field to the value that was provided on create.
func (u *TypecastMessageUpsertOne) UpdateSendAt() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateSendAt()
	})
}

// ClearSendAt clears the value of the "send_at" field.
func (u *TypecastMessageUpsertOne) ClearSendAt() *TypecastMessageUpsertOne {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearSendAt()
	})
}

// Exec executes the query.
func (u *TypecastMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TypecastMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TypecastMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TypecastMessageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TypecastMessageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TypecastMessageCreateBulk is the builder for creating many TypecastMessage entities in bulk.
type TypecastMessageCreateBulk struct {
	config
	builders []*TypecastMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the TypecastMessage entities in the database.
func (tmcb *TypecastMessageCreateBulk) Save(ctx context.Context) ([]*TypecastMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TypecastMessage, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TypecastMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TypecastMessageCreateBulk) SaveX(ctx context.Context) []*TypecastMessage {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TypecastMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TypecastMessageCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TypecastMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TypecastMessageUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tmcb *TypecastMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *TypecastMessageUpsertBulk {
	tmcb.conflict = opts
	return &TypecastMessageUpsertBulk{
		create: tmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmcb *TypecastMessageCreateBulk) OnConflictColumns(columns ...string) *TypecastMessageUpsertBulk {
	tmcb.conflict = append(tmcb.conflict, sql.ConflictColumns(columns...))
	return &TypecastMessageUpsertBulk{
		create: tmcb,
	}
}

// TypecastMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of TypecastMessage nodes.
type TypecastMessageUpsertBulk struct {
	create *TypecastMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TypecastMessageUpsertBulk) UpdateNewValues() *TypecastMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TypecastMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TypecastMessageUpsertBulk) Ignore() *TypecastMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TypecastMessageUpsertBulk) DoNothing() *TypecastMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TypecastMessageCreateBulk.OnConflict
// documentation for more info.
func (u *TypecastMessageUpsertBulk) Update(set func(*TypecastMessageUpsert)) *TypecastMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TypecastMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TypecastMessageUpsertBulk) SetUserID(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateUserID() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateUserID()
	})
}

// SetText sets the "text" field.
func (u *TypecastMessageUpsertBulk) SetText(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateText() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateText()
	})
}

// SetGuildID sets the "guild_id" field.
func (u *TypecastMessageUpsertBulk) SetGuildID(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetGuildID(v)
	})
}

// UpdateGuildID sets the "guild_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateGuildID() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateGuildID()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *TypecastMessageUpsertBulk) SetChannelID(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateChannelID() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateChannelID()
	})
}

// SetActorID sets the "actor_id" field.
func (u *TypecastMessageUpsertBulk) SetActorID(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetActorID(v)
	})
}

// UpdateActorID sets the "actor_id" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateActorID() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateActorID()
	})
}

// SetLang sets the "lang" field.
func (u *TypecastMessageUpsertBulk) SetLang(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetLang(v)
	})
}

// UpdateLang sets the "lang" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateLang() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateLang()
	})
}

// SetMaxSeconds sets the "max_seconds" field.
func (u *TypecastMessageUpsertBulk) SetMaxSeconds(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetMaxSeconds(v)
	})
}

// AddMaxSeconds adds v to the "max_seconds" field.
func (u *TypecastMessageUpsertBulk) AddMaxSeconds(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddMaxSeconds(v)
	})
}

// UpdateMaxSeconds sets the "max_seconds" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateMaxSeconds() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateMaxSeconds()
	})
}

// SetNaturalness sets the "naturalness" field.
func (u *TypecastMessageUpsertBulk) SetNaturalness(v float64) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetNaturalness(v)
	})
}

// AddNaturalness adds v to the "naturalness" field.
func (u *TypecastMessageUpsertBulk) AddNaturalness(v float64) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddNaturalness(v)
	})
}

// UpdateNaturalness sets the "naturalness" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateNaturalness() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateNaturalness()
	})
}

// SetSpeedX sets the "speed_x" field.
func (u *TypecastMessageUpsertBulk) SetSpeedX(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetSpeedX(v)
	})
}

// AddSpeedX adds v to the "speed_x" field.
func (u *TypecastMessageUpsertBulk) AddSpeedX(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddSpeedX(v)
	})
}

// UpdateSpeedX sets the "speed_x" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateSpeedX() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateSpeedX()
	})
}

// SetGid sets the "gid" field.
func (u *TypecastMessageUpsertBulk) SetGid(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetGid(v)
	})
}

// UpdateGid sets the "gid" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateGid() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateGid()
	})
}

// SetStyleIdx sets the "style_idx" field.
func (u *TypecastMessageUpsertBulk) SetStyleIdx(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleIdx(v)
	})
}

// AddStyleIdx adds v to the "style_idx" field.
func (u *TypecastMessageUpsertBulk) AddStyleIdx(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddStyleIdx(v)
	})
}

// UpdateStyleIdx sets the "style_idx" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateStyleIdx() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleIdx()
	})
}

// SetLastPitch sets the "last_pitch" field.
func (u *TypecastMessageUpsertBulk) SetLastPitch(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetLastPitch(v)
	})
}

// UpdateLastPitch sets the "last_pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateLastPitch() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateLastPitch()
	})
}

// ClearLastPitch clears the value of the "last_pitch" field.
func (u *TypecastMessageUpsertBulk) ClearLastPitch() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearLastPitch()
	})
}

// SetMode sets the "mode" field.
func (u *TypecastMessageUpsertBulk) SetMode(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateMode() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateMode()
	})
}

// ClearMode clears the value of the "mode" field.
func (u *TypecastMessageUpsertBulk) ClearMode() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearMode()
	})
}

// SetPitch sets the "pitch" field.
func (u *TypecastMessageUpsertBulk) SetPitch(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetPitch(v)
	})
}

// AddPitch adds v to the "pitch" field.
func (u *TypecastMessageUpsertBulk) AddPitch(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddPitch(v)
	})
}

// UpdatePitch sets the "pitch" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdatePitch() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdatePitch()
	})
}

// SetStyleLabel sets the "style_label" field.
func (u *TypecastMessageUpsertBulk) SetStyleLabel(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleLabel(v)
	})
}

// UpdateStyleLabel sets the "style_label" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateStyleLabel() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleLabel()
	})
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (u *TypecastMessageUpsertBulk) SetStyleLabelVersion(v string) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStyleLabelVersion(v)
	})
}

// UpdateStyleLabelVersion sets the "style_label_version" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateStyleLabelVersion() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStyleLabelVersion()
	})
}

// SetTempo sets the "tempo" field.
func (u *TypecastMessageUpsertBulk) SetTempo(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetTempo(v)
	})
}

// AddTempo adds v to the "tempo" field.
func (u *TypecastMessageUpsertBulk) AddTempo(v int) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddTempo(v)
	})
}

// UpdateTempo sets the "tempo" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateTempo() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateTempo()
	})
}

// SetStatus sets the "status" field.
func (u *TypecastMessageUpsertBulk) SetStatus(v int8) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TypecastMessageUpsertBulk) AddStatus(v int8) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateStatus() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateStatus()
	})
}

// SetSendAt sets the "send_at" field.
func (u *TypecastMessageUpsertBulk) SetSendAt(v time.Time) *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.SetSendAt(v)
	})
}

// UpdateSendAt sets the "send_at" field to the value that was provided on create.
func (u *TypecastMessageUpsertBulk) UpdateSendAt() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.UpdateSendAt()
	})
}

// ClearSendAt clears the value of the "send_at" field.
func (u *TypecastMessageUpsertBulk) ClearSendAt() *TypecastMessageUpsertBulk {
	return u.Update(func(s *TypecastMessageUpsert) {
		s.ClearSendAt()
	})
}

// Exec executes the query.
func (u *TypecastMessageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TypecastMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TypecastMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TypecastMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
