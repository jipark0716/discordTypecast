// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jipark0716/discordTypecast/ent/usertypecastsetting"
)

// UserTypecastSettingCreate is the builder for creating a UserTypecastSetting entity.
type UserTypecastSettingCreate struct {
	config
	mutation *UserTypecastSettingMutation
	hooks    []Hook
}

// SetActorID sets the "actor_id" field.
func (utsc *UserTypecastSettingCreate) SetActorID(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetActorID(s)
	return utsc
}

// SetText sets the "text" field.
func (utsc *UserTypecastSettingCreate) SetText(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetText(s)
	return utsc
}

// SetLang sets the "lang" field.
func (utsc *UserTypecastSettingCreate) SetLang(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetLang(s)
	return utsc
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableLang(s *string) *UserTypecastSettingCreate {
	if s != nil {
		utsc.SetLang(*s)
	}
	return utsc
}

// SetMaxSeconds sets the "max_seconds" field.
func (utsc *UserTypecastSettingCreate) SetMaxSeconds(i int) *UserTypecastSettingCreate {
	utsc.mutation.SetMaxSeconds(i)
	return utsc
}

// SetNillableMaxSeconds sets the "max_seconds" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableMaxSeconds(i *int) *UserTypecastSettingCreate {
	if i != nil {
		utsc.SetMaxSeconds(*i)
	}
	return utsc
}

// SetNaturalness sets the "naturalness" field.
func (utsc *UserTypecastSettingCreate) SetNaturalness(f float64) *UserTypecastSettingCreate {
	utsc.mutation.SetNaturalness(f)
	return utsc
}

// SetNillableNaturalness sets the "naturalness" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableNaturalness(f *float64) *UserTypecastSettingCreate {
	if f != nil {
		utsc.SetNaturalness(*f)
	}
	return utsc
}

// SetSpeedX sets the "speed_x" field.
func (utsc *UserTypecastSettingCreate) SetSpeedX(i int) *UserTypecastSettingCreate {
	utsc.mutation.SetSpeedX(i)
	return utsc
}

// SetGid sets the "gid" field.
func (utsc *UserTypecastSettingCreate) SetGid(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetGid(s)
	return utsc
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableGid(s *string) *UserTypecastSettingCreate {
	if s != nil {
		utsc.SetGid(*s)
	}
	return utsc
}

// SetStyleIdx sets the "style_idx" field.
func (utsc *UserTypecastSettingCreate) SetStyleIdx(i int) *UserTypecastSettingCreate {
	utsc.mutation.SetStyleIdx(i)
	return utsc
}

// SetNillableStyleIdx sets the "style_idx" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableStyleIdx(i *int) *UserTypecastSettingCreate {
	if i != nil {
		utsc.SetStyleIdx(*i)
	}
	return utsc
}

// SetLastPitch sets the "last_pitch" field.
func (utsc *UserTypecastSettingCreate) SetLastPitch(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetLastPitch(s)
	return utsc
}

// SetMode sets the "mode" field.
func (utsc *UserTypecastSettingCreate) SetMode(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetMode(s)
	return utsc
}

// SetPitch sets the "pitch" field.
func (utsc *UserTypecastSettingCreate) SetPitch(i int) *UserTypecastSettingCreate {
	utsc.mutation.SetPitch(i)
	return utsc
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillablePitch(i *int) *UserTypecastSettingCreate {
	if i != nil {
		utsc.SetPitch(*i)
	}
	return utsc
}

// SetStyleLabel sets the "style_label" field.
func (utsc *UserTypecastSettingCreate) SetStyleLabel(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetStyleLabel(s)
	return utsc
}

// SetNillableStyleLabel sets the "style_label" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableStyleLabel(s *string) *UserTypecastSettingCreate {
	if s != nil {
		utsc.SetStyleLabel(*s)
	}
	return utsc
}

// SetStyleLabelVersion sets the "style_label_version" field.
func (utsc *UserTypecastSettingCreate) SetStyleLabelVersion(s string) *UserTypecastSettingCreate {
	utsc.mutation.SetStyleLabelVersion(s)
	return utsc
}

// SetNillableStyleLabelVersion sets the "style_label_version" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableStyleLabelVersion(s *string) *UserTypecastSettingCreate {
	if s != nil {
		utsc.SetStyleLabelVersion(*s)
	}
	return utsc
}

// SetTempo sets the "tempo" field.
func (utsc *UserTypecastSettingCreate) SetTempo(i int) *UserTypecastSettingCreate {
	utsc.mutation.SetTempo(i)
	return utsc
}

// SetNillableTempo sets the "tempo" field if the given value is not nil.
func (utsc *UserTypecastSettingCreate) SetNillableTempo(i *int) *UserTypecastSettingCreate {
	if i != nil {
		utsc.SetTempo(*i)
	}
	return utsc
}

// Mutation returns the UserTypecastSettingMutation object of the builder.
func (utsc *UserTypecastSettingCreate) Mutation() *UserTypecastSettingMutation {
	return utsc.mutation
}

// Save creates the UserTypecastSetting in the database.
func (utsc *UserTypecastSettingCreate) Save(ctx context.Context) (*UserTypecastSetting, error) {
	var (
		err  error
		node *UserTypecastSetting
	)
	utsc.defaults()
	if len(utsc.hooks) == 0 {
		if err = utsc.check(); err != nil {
			return nil, err
		}
		node, err = utsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTypecastSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = utsc.check(); err != nil {
				return nil, err
			}
			utsc.mutation = mutation
			if node, err = utsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(utsc.hooks) - 1; i >= 0; i-- {
			if utsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = utsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, utsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserTypecastSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserTypecastSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (utsc *UserTypecastSettingCreate) SaveX(ctx context.Context) *UserTypecastSetting {
	v, err := utsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utsc *UserTypecastSettingCreate) Exec(ctx context.Context) error {
	_, err := utsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsc *UserTypecastSettingCreate) ExecX(ctx context.Context) {
	if err := utsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utsc *UserTypecastSettingCreate) defaults() {
	if _, ok := utsc.mutation.Lang(); !ok {
		v := usertypecastsetting.DefaultLang
		utsc.mutation.SetLang(v)
	}
	if _, ok := utsc.mutation.MaxSeconds(); !ok {
		v := usertypecastsetting.DefaultMaxSeconds
		utsc.mutation.SetMaxSeconds(v)
	}
	if _, ok := utsc.mutation.Naturalness(); !ok {
		v := usertypecastsetting.DefaultNaturalness
		utsc.mutation.SetNaturalness(v)
	}
	if _, ok := utsc.mutation.Gid(); !ok {
		v := usertypecastsetting.DefaultGid
		utsc.mutation.SetGid(v)
	}
	if _, ok := utsc.mutation.StyleIdx(); !ok {
		v := usertypecastsetting.DefaultStyleIdx
		utsc.mutation.SetStyleIdx(v)
	}
	if _, ok := utsc.mutation.Pitch(); !ok {
		v := usertypecastsetting.DefaultPitch
		utsc.mutation.SetPitch(v)
	}
	if _, ok := utsc.mutation.StyleLabel(); !ok {
		v := usertypecastsetting.DefaultStyleLabel
		utsc.mutation.SetStyleLabel(v)
	}
	if _, ok := utsc.mutation.StyleLabelVersion(); !ok {
		v := usertypecastsetting.DefaultStyleLabelVersion
		utsc.mutation.SetStyleLabelVersion(v)
	}
	if _, ok := utsc.mutation.Tempo(); !ok {
		v := usertypecastsetting.DefaultTempo
		utsc.mutation.SetTempo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsc *UserTypecastSettingCreate) check() error {
	if _, ok := utsc.mutation.ActorID(); !ok {
		return &ValidationError{Name: "actor_id", err: errors.New(`ent: missing required field "UserTypecastSetting.actor_id"`)}
	}
	if _, ok := utsc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "UserTypecastSetting.text"`)}
	}
	if _, ok := utsc.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "UserTypecastSetting.lang"`)}
	}
	if _, ok := utsc.mutation.MaxSeconds(); !ok {
		return &ValidationError{Name: "max_seconds", err: errors.New(`ent: missing required field "UserTypecastSetting.max_seconds"`)}
	}
	if _, ok := utsc.mutation.Naturalness(); !ok {
		return &ValidationError{Name: "naturalness", err: errors.New(`ent: missing required field "UserTypecastSetting.naturalness"`)}
	}
	if _, ok := utsc.mutation.SpeedX(); !ok {
		return &ValidationError{Name: "speed_x", err: errors.New(`ent: missing required field "UserTypecastSetting.speed_x"`)}
	}
	if _, ok := utsc.mutation.Gid(); !ok {
		return &ValidationError{Name: "gid", err: errors.New(`ent: missing required field "UserTypecastSetting.gid"`)}
	}
	if _, ok := utsc.mutation.StyleIdx(); !ok {
		return &ValidationError{Name: "style_idx", err: errors.New(`ent: missing required field "UserTypecastSetting.style_idx"`)}
	}
	if _, ok := utsc.mutation.LastPitch(); !ok {
		return &ValidationError{Name: "last_pitch", err: errors.New(`ent: missing required field "UserTypecastSetting.last_pitch"`)}
	}
	if _, ok := utsc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "UserTypecastSetting.mode"`)}
	}
	if _, ok := utsc.mutation.Pitch(); !ok {
		return &ValidationError{Name: "pitch", err: errors.New(`ent: missing required field "UserTypecastSetting.pitch"`)}
	}
	if _, ok := utsc.mutation.StyleLabel(); !ok {
		return &ValidationError{Name: "style_label", err: errors.New(`ent: missing required field "UserTypecastSetting.style_label"`)}
	}
	if _, ok := utsc.mutation.StyleLabelVersion(); !ok {
		return &ValidationError{Name: "style_label_version", err: errors.New(`ent: missing required field "UserTypecastSetting.style_label_version"`)}
	}
	if _, ok := utsc.mutation.Tempo(); !ok {
		return &ValidationError{Name: "tempo", err: errors.New(`ent: missing required field "UserTypecastSetting.tempo"`)}
	}
	return nil
}

func (utsc *UserTypecastSettingCreate) sqlSave(ctx context.Context) (*UserTypecastSetting, error) {
	_node, _spec := utsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (utsc *UserTypecastSettingCreate) createSpec() (*UserTypecastSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTypecastSetting{config: utsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usertypecastsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertypecastsetting.FieldID,
			},
		}
	)
	if value, ok := utsc.mutation.ActorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldActorID,
		})
		_node.ActorID = value
	}
	if value, ok := utsc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldText,
		})
		_node.Text = value
	}
	if value, ok := utsc.mutation.Lang(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLang,
		})
		_node.Lang = value
	}
	if value, ok := utsc.mutation.MaxSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldMaxSeconds,
		})
		_node.MaxSeconds = value
	}
	if value, ok := utsc.mutation.Naturalness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usertypecastsetting.FieldNaturalness,
		})
		_node.Naturalness = value
	}
	if value, ok := utsc.mutation.SpeedX(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldSpeedX,
		})
		_node.SpeedX = value
	}
	if value, ok := utsc.mutation.Gid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldGid,
		})
		_node.Gid = value
	}
	if value, ok := utsc.mutation.StyleIdx(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldStyleIdx,
		})
		_node.StyleIdx = value
	}
	if value, ok := utsc.mutation.LastPitch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldLastPitch,
		})
		_node.LastPitch = &value
	}
	if value, ok := utsc.mutation.Mode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldMode,
		})
		_node.Mode = value
	}
	if value, ok := utsc.mutation.Pitch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldPitch,
		})
		_node.Pitch = value
	}
	if value, ok := utsc.mutation.StyleLabel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabel,
		})
		_node.StyleLabel = value
	}
	if value, ok := utsc.mutation.StyleLabelVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertypecastsetting.FieldStyleLabelVersion,
		})
		_node.StyleLabelVersion = value
	}
	if value, ok := utsc.mutation.Tempo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertypecastsetting.FieldTempo,
		})
		_node.Tempo = value
	}
	return _node, _spec
}

// UserTypecastSettingCreateBulk is the builder for creating many UserTypecastSetting entities in bulk.
type UserTypecastSettingCreateBulk struct {
	config
	builders []*UserTypecastSettingCreate
}

// Save creates the UserTypecastSetting entities in the database.
func (utscb *UserTypecastSettingCreateBulk) Save(ctx context.Context) ([]*UserTypecastSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(utscb.builders))
	nodes := make([]*UserTypecastSetting, len(utscb.builders))
	mutators := make([]Mutator, len(utscb.builders))
	for i := range utscb.builders {
		func(i int, root context.Context) {
			builder := utscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTypecastSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utscb *UserTypecastSettingCreateBulk) SaveX(ctx context.Context) []*UserTypecastSetting {
	v, err := utscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utscb *UserTypecastSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := utscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utscb *UserTypecastSettingCreateBulk) ExecX(ctx context.Context) {
	if err := utscb.Exec(ctx); err != nil {
		panic(err)
	}
}
