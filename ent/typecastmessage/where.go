// Code generated by ent, DO NOT EDIT.

package typecastmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jipark0716/discordTypecast/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ActorID applies equality check predicate on the "actor_id" field. It's identical to ActorIDEQ.
func ActorID(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActorID), v))
	})
}

// Lang applies equality check predicate on the "lang" field. It's identical to LangEQ.
func Lang(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang), v))
	})
}

// MaxSeconds applies equality check predicate on the "max_seconds" field. It's identical to MaxSecondsEQ.
func MaxSeconds(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxSeconds), v))
	})
}

// Naturalness applies equality check predicate on the "naturalness" field. It's identical to NaturalnessEQ.
func Naturalness(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNaturalness), v))
	})
}

// SpeedX applies equality check predicate on the "speed_x" field. It's identical to SpeedXEQ.
func SpeedX(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeedX), v))
	})
}

// Gid applies equality check predicate on the "gid" field. It's identical to GidEQ.
func Gid(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGid), v))
	})
}

// StyleIdx applies equality check predicate on the "style_idx" field. It's identical to StyleIdxEQ.
func StyleIdx(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleIdx), v))
	})
}

// LastPitch applies equality check predicate on the "last_pitch" field. It's identical to LastPitchEQ.
func LastPitch(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastPitch), v))
	})
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// Pitch applies equality check predicate on the "pitch" field. It's identical to PitchEQ.
func Pitch(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPitch), v))
	})
}

// StyleLabel applies equality check predicate on the "style_label" field. It's identical to StyleLabelEQ.
func StyleLabel(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelVersion applies equality check predicate on the "style_label_version" field. It's identical to StyleLabelVersionEQ.
func StyleLabelVersion(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleLabelVersion), v))
	})
}

// Tempo applies equality check predicate on the "tempo" field. It's identical to TempoEQ.
func Tempo(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTempo), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// SendAt applies equality check predicate on the "send_at" field. It's identical to SendAtEQ.
func SendAt(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldText), v))
	})
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldText), v...))
	})
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldText), v...))
	})
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldText), v))
	})
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldText), v))
	})
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldText), v))
	})
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldText), v))
	})
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldText), v))
	})
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldText), v))
	})
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldText), v))
	})
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldText), v))
	})
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldText), v))
	})
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelID), v...))
	})
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelID), v...))
	})
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelID), v))
	})
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelID), v))
	})
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelID), v))
	})
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelID), v))
	})
}

// ChannelIDContains applies the Contains predicate on the "channel_id" field.
func ChannelIDContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChannelID), v))
	})
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channel_id" field.
func ChannelIDHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChannelID), v))
	})
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channel_id" field.
func ChannelIDHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChannelID), v))
	})
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channel_id" field.
func ChannelIDEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChannelID), v))
	})
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channel_id" field.
func ChannelIDContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChannelID), v))
	})
}

// ActorIDEQ applies the EQ predicate on the "actor_id" field.
func ActorIDEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActorID), v))
	})
}

// ActorIDNEQ applies the NEQ predicate on the "actor_id" field.
func ActorIDNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActorID), v))
	})
}

// ActorIDIn applies the In predicate on the "actor_id" field.
func ActorIDIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldActorID), v...))
	})
}

// ActorIDNotIn applies the NotIn predicate on the "actor_id" field.
func ActorIDNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldActorID), v...))
	})
}

// ActorIDGT applies the GT predicate on the "actor_id" field.
func ActorIDGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActorID), v))
	})
}

// ActorIDGTE applies the GTE predicate on the "actor_id" field.
func ActorIDGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActorID), v))
	})
}

// ActorIDLT applies the LT predicate on the "actor_id" field.
func ActorIDLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActorID), v))
	})
}

// ActorIDLTE applies the LTE predicate on the "actor_id" field.
func ActorIDLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActorID), v))
	})
}

// ActorIDContains applies the Contains predicate on the "actor_id" field.
func ActorIDContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActorID), v))
	})
}

// ActorIDHasPrefix applies the HasPrefix predicate on the "actor_id" field.
func ActorIDHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActorID), v))
	})
}

// ActorIDHasSuffix applies the HasSuffix predicate on the "actor_id" field.
func ActorIDHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActorID), v))
	})
}

// ActorIDEqualFold applies the EqualFold predicate on the "actor_id" field.
func ActorIDEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActorID), v))
	})
}

// ActorIDContainsFold applies the ContainsFold predicate on the "actor_id" field.
func ActorIDContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActorID), v))
	})
}

// LangEQ applies the EQ predicate on the "lang" field.
func LangEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang), v))
	})
}

// LangNEQ applies the NEQ predicate on the "lang" field.
func LangNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLang), v))
	})
}

// LangIn applies the In predicate on the "lang" field.
func LangIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLang), v...))
	})
}

// LangNotIn applies the NotIn predicate on the "lang" field.
func LangNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLang), v...))
	})
}

// LangGT applies the GT predicate on the "lang" field.
func LangGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLang), v))
	})
}

// LangGTE applies the GTE predicate on the "lang" field.
func LangGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLang), v))
	})
}

// LangLT applies the LT predicate on the "lang" field.
func LangLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLang), v))
	})
}

// LangLTE applies the LTE predicate on the "lang" field.
func LangLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLang), v))
	})
}

// LangContains applies the Contains predicate on the "lang" field.
func LangContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLang), v))
	})
}

// LangHasPrefix applies the HasPrefix predicate on the "lang" field.
func LangHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLang), v))
	})
}

// LangHasSuffix applies the HasSuffix predicate on the "lang" field.
func LangHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLang), v))
	})
}

// LangEqualFold applies the EqualFold predicate on the "lang" field.
func LangEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLang), v))
	})
}

// LangContainsFold applies the ContainsFold predicate on the "lang" field.
func LangContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLang), v))
	})
}

// MaxSecondsEQ applies the EQ predicate on the "max_seconds" field.
func MaxSecondsEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxSeconds), v))
	})
}

// MaxSecondsNEQ applies the NEQ predicate on the "max_seconds" field.
func MaxSecondsNEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxSeconds), v))
	})
}

// MaxSecondsIn applies the In predicate on the "max_seconds" field.
func MaxSecondsIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxSeconds), v...))
	})
}

// MaxSecondsNotIn applies the NotIn predicate on the "max_seconds" field.
func MaxSecondsNotIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxSeconds), v...))
	})
}

// MaxSecondsGT applies the GT predicate on the "max_seconds" field.
func MaxSecondsGT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxSeconds), v))
	})
}

// MaxSecondsGTE applies the GTE predicate on the "max_seconds" field.
func MaxSecondsGTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxSeconds), v))
	})
}

// MaxSecondsLT applies the LT predicate on the "max_seconds" field.
func MaxSecondsLT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxSeconds), v))
	})
}

// MaxSecondsLTE applies the LTE predicate on the "max_seconds" field.
func MaxSecondsLTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxSeconds), v))
	})
}

// NaturalnessEQ applies the EQ predicate on the "naturalness" field.
func NaturalnessEQ(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNaturalness), v))
	})
}

// NaturalnessNEQ applies the NEQ predicate on the "naturalness" field.
func NaturalnessNEQ(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNaturalness), v))
	})
}

// NaturalnessIn applies the In predicate on the "naturalness" field.
func NaturalnessIn(vs ...float64) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNaturalness), v...))
	})
}

// NaturalnessNotIn applies the NotIn predicate on the "naturalness" field.
func NaturalnessNotIn(vs ...float64) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNaturalness), v...))
	})
}

// NaturalnessGT applies the GT predicate on the "naturalness" field.
func NaturalnessGT(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNaturalness), v))
	})
}

// NaturalnessGTE applies the GTE predicate on the "naturalness" field.
func NaturalnessGTE(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNaturalness), v))
	})
}

// NaturalnessLT applies the LT predicate on the "naturalness" field.
func NaturalnessLT(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNaturalness), v))
	})
}

// NaturalnessLTE applies the LTE predicate on the "naturalness" field.
func NaturalnessLTE(v float64) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNaturalness), v))
	})
}

// SpeedXEQ applies the EQ predicate on the "speed_x" field.
func SpeedXEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeedX), v))
	})
}

// SpeedXNEQ applies the NEQ predicate on the "speed_x" field.
func SpeedXNEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpeedX), v))
	})
}

// SpeedXIn applies the In predicate on the "speed_x" field.
func SpeedXIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpeedX), v...))
	})
}

// SpeedXNotIn applies the NotIn predicate on the "speed_x" field.
func SpeedXNotIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpeedX), v...))
	})
}

// SpeedXGT applies the GT predicate on the "speed_x" field.
func SpeedXGT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpeedX), v))
	})
}

// SpeedXGTE applies the GTE predicate on the "speed_x" field.
func SpeedXGTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpeedX), v))
	})
}

// SpeedXLT applies the LT predicate on the "speed_x" field.
func SpeedXLT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpeedX), v))
	})
}

// SpeedXLTE applies the LTE predicate on the "speed_x" field.
func SpeedXLTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpeedX), v))
	})
}

// GidEQ applies the EQ predicate on the "gid" field.
func GidEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGid), v))
	})
}

// GidNEQ applies the NEQ predicate on the "gid" field.
func GidNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGid), v))
	})
}

// GidIn applies the In predicate on the "gid" field.
func GidIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGid), v...))
	})
}

// GidNotIn applies the NotIn predicate on the "gid" field.
func GidNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGid), v...))
	})
}

// GidGT applies the GT predicate on the "gid" field.
func GidGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGid), v))
	})
}

// GidGTE applies the GTE predicate on the "gid" field.
func GidGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGid), v))
	})
}

// GidLT applies the LT predicate on the "gid" field.
func GidLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGid), v))
	})
}

// GidLTE applies the LTE predicate on the "gid" field.
func GidLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGid), v))
	})
}

// GidContains applies the Contains predicate on the "gid" field.
func GidContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGid), v))
	})
}

// GidHasPrefix applies the HasPrefix predicate on the "gid" field.
func GidHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGid), v))
	})
}

// GidHasSuffix applies the HasSuffix predicate on the "gid" field.
func GidHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGid), v))
	})
}

// GidEqualFold applies the EqualFold predicate on the "gid" field.
func GidEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGid), v))
	})
}

// GidContainsFold applies the ContainsFold predicate on the "gid" field.
func GidContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGid), v))
	})
}

// StyleIdxEQ applies the EQ predicate on the "style_idx" field.
func StyleIdxEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleIdx), v))
	})
}

// StyleIdxNEQ applies the NEQ predicate on the "style_idx" field.
func StyleIdxNEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStyleIdx), v))
	})
}

// StyleIdxIn applies the In predicate on the "style_idx" field.
func StyleIdxIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStyleIdx), v...))
	})
}

// StyleIdxNotIn applies the NotIn predicate on the "style_idx" field.
func StyleIdxNotIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStyleIdx), v...))
	})
}

// StyleIdxGT applies the GT predicate on the "style_idx" field.
func StyleIdxGT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStyleIdx), v))
	})
}

// StyleIdxGTE applies the GTE predicate on the "style_idx" field.
func StyleIdxGTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStyleIdx), v))
	})
}

// StyleIdxLT applies the LT predicate on the "style_idx" field.
func StyleIdxLT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStyleIdx), v))
	})
}

// StyleIdxLTE applies the LTE predicate on the "style_idx" field.
func StyleIdxLTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStyleIdx), v))
	})
}

// LastPitchEQ applies the EQ predicate on the "last_pitch" field.
func LastPitchEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastPitch), v))
	})
}

// LastPitchNEQ applies the NEQ predicate on the "last_pitch" field.
func LastPitchNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastPitch), v))
	})
}

// LastPitchIn applies the In predicate on the "last_pitch" field.
func LastPitchIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastPitch), v...))
	})
}

// LastPitchNotIn applies the NotIn predicate on the "last_pitch" field.
func LastPitchNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastPitch), v...))
	})
}

// LastPitchGT applies the GT predicate on the "last_pitch" field.
func LastPitchGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastPitch), v))
	})
}

// LastPitchGTE applies the GTE predicate on the "last_pitch" field.
func LastPitchGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastPitch), v))
	})
}

// LastPitchLT applies the LT predicate on the "last_pitch" field.
func LastPitchLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastPitch), v))
	})
}

// LastPitchLTE applies the LTE predicate on the "last_pitch" field.
func LastPitchLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastPitch), v))
	})
}

// LastPitchContains applies the Contains predicate on the "last_pitch" field.
func LastPitchContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastPitch), v))
	})
}

// LastPitchHasPrefix applies the HasPrefix predicate on the "last_pitch" field.
func LastPitchHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastPitch), v))
	})
}

// LastPitchHasSuffix applies the HasSuffix predicate on the "last_pitch" field.
func LastPitchHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastPitch), v))
	})
}

// LastPitchEqualFold applies the EqualFold predicate on the "last_pitch" field.
func LastPitchEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastPitch), v))
	})
}

// LastPitchContainsFold applies the ContainsFold predicate on the "last_pitch" field.
func LastPitchContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastPitch), v))
	})
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMode), v))
	})
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMode), v...))
	})
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMode), v...))
	})
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMode), v))
	})
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMode), v))
	})
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMode), v))
	})
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMode), v))
	})
}

// ModeContains applies the Contains predicate on the "mode" field.
func ModeContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMode), v))
	})
}

// ModeHasPrefix applies the HasPrefix predicate on the "mode" field.
func ModeHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMode), v))
	})
}

// ModeHasSuffix applies the HasSuffix predicate on the "mode" field.
func ModeHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMode), v))
	})
}

// ModeEqualFold applies the EqualFold predicate on the "mode" field.
func ModeEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMode), v))
	})
}

// ModeContainsFold applies the ContainsFold predicate on the "mode" field.
func ModeContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMode), v))
	})
}

// PitchEQ applies the EQ predicate on the "pitch" field.
func PitchEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPitch), v))
	})
}

// PitchNEQ applies the NEQ predicate on the "pitch" field.
func PitchNEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPitch), v))
	})
}

// PitchIn applies the In predicate on the "pitch" field.
func PitchIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPitch), v...))
	})
}

// PitchNotIn applies the NotIn predicate on the "pitch" field.
func PitchNotIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPitch), v...))
	})
}

// PitchGT applies the GT predicate on the "pitch" field.
func PitchGT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPitch), v))
	})
}

// PitchGTE applies the GTE predicate on the "pitch" field.
func PitchGTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPitch), v))
	})
}

// PitchLT applies the LT predicate on the "pitch" field.
func PitchLT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPitch), v))
	})
}

// PitchLTE applies the LTE predicate on the "pitch" field.
func PitchLTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPitch), v))
	})
}

// StyleLabelEQ applies the EQ predicate on the "style_label" field.
func StyleLabelEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelNEQ applies the NEQ predicate on the "style_label" field.
func StyleLabelNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelIn applies the In predicate on the "style_label" field.
func StyleLabelIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStyleLabel), v...))
	})
}

// StyleLabelNotIn applies the NotIn predicate on the "style_label" field.
func StyleLabelNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStyleLabel), v...))
	})
}

// StyleLabelGT applies the GT predicate on the "style_label" field.
func StyleLabelGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelGTE applies the GTE predicate on the "style_label" field.
func StyleLabelGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelLT applies the LT predicate on the "style_label" field.
func StyleLabelLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelLTE applies the LTE predicate on the "style_label" field.
func StyleLabelLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelContains applies the Contains predicate on the "style_label" field.
func StyleLabelContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelHasPrefix applies the HasPrefix predicate on the "style_label" field.
func StyleLabelHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelHasSuffix applies the HasSuffix predicate on the "style_label" field.
func StyleLabelHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelEqualFold applies the EqualFold predicate on the "style_label" field.
func StyleLabelEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelContainsFold applies the ContainsFold predicate on the "style_label" field.
func StyleLabelContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStyleLabel), v))
	})
}

// StyleLabelVersionEQ applies the EQ predicate on the "style_label_version" field.
func StyleLabelVersionEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionNEQ applies the NEQ predicate on the "style_label_version" field.
func StyleLabelVersionNEQ(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionIn applies the In predicate on the "style_label_version" field.
func StyleLabelVersionIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStyleLabelVersion), v...))
	})
}

// StyleLabelVersionNotIn applies the NotIn predicate on the "style_label_version" field.
func StyleLabelVersionNotIn(vs ...string) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStyleLabelVersion), v...))
	})
}

// StyleLabelVersionGT applies the GT predicate on the "style_label_version" field.
func StyleLabelVersionGT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionGTE applies the GTE predicate on the "style_label_version" field.
func StyleLabelVersionGTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionLT applies the LT predicate on the "style_label_version" field.
func StyleLabelVersionLT(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionLTE applies the LTE predicate on the "style_label_version" field.
func StyleLabelVersionLTE(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionContains applies the Contains predicate on the "style_label_version" field.
func StyleLabelVersionContains(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionHasPrefix applies the HasPrefix predicate on the "style_label_version" field.
func StyleLabelVersionHasPrefix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionHasSuffix applies the HasSuffix predicate on the "style_label_version" field.
func StyleLabelVersionHasSuffix(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionEqualFold applies the EqualFold predicate on the "style_label_version" field.
func StyleLabelVersionEqualFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStyleLabelVersion), v))
	})
}

// StyleLabelVersionContainsFold applies the ContainsFold predicate on the "style_label_version" field.
func StyleLabelVersionContainsFold(v string) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStyleLabelVersion), v))
	})
}

// TempoEQ applies the EQ predicate on the "tempo" field.
func TempoEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTempo), v))
	})
}

// TempoNEQ applies the NEQ predicate on the "tempo" field.
func TempoNEQ(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTempo), v))
	})
}

// TempoIn applies the In predicate on the "tempo" field.
func TempoIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTempo), v...))
	})
}

// TempoNotIn applies the NotIn predicate on the "tempo" field.
func TempoNotIn(vs ...int) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTempo), v...))
	})
}

// TempoGT applies the GT predicate on the "tempo" field.
func TempoGT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTempo), v))
	})
}

// TempoGTE applies the GTE predicate on the "tempo" field.
func TempoGTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTempo), v))
	})
}

// TempoLT applies the LT predicate on the "tempo" field.
func TempoLT(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTempo), v))
	})
}

// TempoLTE applies the LTE predicate on the "tempo" field.
func TempoLTE(v int) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTempo), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// SendAtEQ applies the EQ predicate on the "send_at" field.
func SendAtEQ(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendAt), v))
	})
}

// SendAtNEQ applies the NEQ predicate on the "send_at" field.
func SendAtNEQ(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendAt), v))
	})
}

// SendAtIn applies the In predicate on the "send_at" field.
func SendAtIn(vs ...time.Time) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSendAt), v...))
	})
}

// SendAtNotIn applies the NotIn predicate on the "send_at" field.
func SendAtNotIn(vs ...time.Time) predicate.TypecastMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSendAt), v...))
	})
}

// SendAtGT applies the GT predicate on the "send_at" field.
func SendAtGT(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSendAt), v))
	})
}

// SendAtGTE applies the GTE predicate on the "send_at" field.
func SendAtGTE(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSendAt), v))
	})
}

// SendAtLT applies the LT predicate on the "send_at" field.
func SendAtLT(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSendAt), v))
	})
}

// SendAtLTE applies the LTE predicate on the "send_at" field.
func SendAtLTE(v time.Time) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSendAt), v))
	})
}

// SendAtIsNil applies the IsNil predicate on the "send_at" field.
func SendAtIsNil() predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSendAt)))
	})
}

// SendAtNotNil applies the NotNil predicate on the "send_at" field.
func SendAtNotNil() predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSendAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TypecastMessage) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TypecastMessage) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TypecastMessage) predicate.TypecastMessage {
	return predicate.TypecastMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
